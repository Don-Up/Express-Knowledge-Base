# Authentication and Authorization

## Implementing Authentication

### 1. Using Passport.js for Strategies

Use Passport.js to handle authentication with various strategies.

**Demo Code:**

```typescript
import express from 'express';
import passport from 'passport';
import { Strategy as LocalStrategy } from 'passport-local';
import session from 'express-session';

// Dummy user for demonstration
const users = [{ id: 1, username: 'user', password: 'pass' }];

const app = express();
const port = 3000;

// Configure session
app.use(session({ secret: 'secret', resave: false, saveUninitialized: false }));

// Initialize Passport
app.use(passport.initialize());
app.use(passport.session());

// Configure Passport strategy
passport.use(new LocalStrategy(
  (username, password, done) => {
    const user = users.find(u => u.username === username && u.password === password);
    if (user) return done(null, user);
    return done(null, false, { message: 'Invalid credentials' });
  }
));

// Serialize user
passport.serializeUser((user, done) => done(null, user.id));

// Deserialize user
passport.deserializeUser((id, done) => {
  const user = users.find(u => u.id === id);
  done(null, user);
});

// Route for authentication
app.post('/login', 
  passport.authenticate('local', { session: true }), 
  (req, res) => res.send('Logged in')
);

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

**Usage:**

1. **Install Passport and Strategy**: Use `npm install passport passport-local express-session`.
2. **Configure Strategy**: Set up Passport strategies for authentication.
3. **Manage Sessions**: Use sessions to maintain authentication state.

This setup demonstrates implementing authentication using Passport.js with a local strategy in an Express application.

### 2. JWT for Token-Based Authentication

Use JWT to handle token-based authentication in Express.

**Demo Code:**

```typescript
import express from 'express';
import jwt from 'jsonwebtoken';
import bodyParser from 'body-parser';

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Secret key for JWT
const secretKey = 'your-secret-key';

// Dummy user for demonstration
const users = [{ id: 1, username: 'user', password: 'pass' }];

// Route to authenticate and issue token
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).send('Invalid credentials');

  const token = jwt.sign({ id: user.id }, secretKey, { expiresIn: '1h' });
  res.json({ token });
});

// Middleware to protect routes
const authenticateJWT = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, secretKey, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Protected route
app.get('/protected', authenticateJWT, (req, res) => {
  res.send('This is a protected route');
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

**Usage:**

1. **Install JWT**: Use `npm install jsonwebtoken body-parser`.
2. **Issue Token**: Use `jwt.sign()` to create a token upon successful login.
3. **Protect Routes**: Use middleware to verify tokens with `jwt.verify()`.

This setup demonstrates implementing JWT-based authentication in an Express application.



## Protecting Routes

### Route Guards and Middleware

Use middleware to protect routes by enforcing authentication.

**Demo Code:**

```typescript
import express from 'express';
import jwt from 'jsonwebtoken';
import bodyParser from 'body-parser';

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Secret key for JWT
const secretKey = 'your-secret-key';

// Dummy user for demonstration
const users = [{ id: 1, username: 'user', password: 'pass' }];

// Middleware to protect routes
const authenticateJWT = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, secretKey, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Route to authenticate and issue token
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).send('Invalid credentials');

  const token = jwt.sign({ id: user.id }, secretKey, { expiresIn: '1h' });
  res.json({ token });
});

// Protected route
app.get('/protected', authenticateJWT, (req, res) => {
  res.send('This is a protected route');
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

**Usage:**

1. **Install Dependencies**: Use `npm install jsonwebtoken body-parser`.
2. **Apply Middleware**: Use `authenticateJWT` middleware to protect routes.
3. **Check Authorization**: Verify token and enforce route access control.

This setup demonstrates how to use middleware to protect routes in an Express application.



## Role-Based Access Control (RBAC)

#### 1. Defining User Roles

Implement RBAC by defining user roles and controlling access based on roles.

**Demo Code:**

```typescript
import express from 'express';
import jwt from 'jsonwebtoken';
import bodyParser from 'body-parser';

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Secret key for JWT
const secretKey = 'your-secret-key';

// Dummy users with roles
const users = [
  { id: 1, username: 'admin', password: 'adminpass', role: 'admin' },
  { id: 2, username: 'user', password: 'userpass', role: 'user' }
];

// Middleware to check roles
const authorizeRole = (role) => (req, res, next) => {
  if (req.user.role !== role) return res.sendStatus(403);
  next();
};

// Middleware to protect routes and check token
const authenticateJWT = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, secretKey, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Route to authenticate and issue token
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).send('Invalid credentials');

  const token = jwt.sign({ id: user.id, role: user.role }, secretKey, { expiresIn: '1h' });
  res.json({ token });
});

// Protected route with role check
app.get('/admin', authenticateJWT, authorizeRole('admin'), (req, res) => {
  res.send('Admin access granted');
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

**Usage:**

1. **Define Roles**: Add roles to user objects.
2. **Check Roles**: Use `authorizeRole` middleware to restrict access based on roles.
3. **Verify Token**: Include role information in the JWT and validate it.

This setup demonstrates implementing RBAC by defining user roles and controlling access based on these roles in an Express application.

#### 2. estricting Access Based on Roles

Control route access based on user roles using middleware.

**Demo Code:**

```typescript
import express from 'express';
import jwt from 'jsonwebtoken';
import bodyParser from 'body-parser';

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Secret key for JWT
const secretKey = 'your-secret-key';

// Dummy users with roles
const users = [
  { id: 1, username: 'admin', password: 'adminpass', role: 'admin' },
  { id: 2, username: 'user', password: 'userpass', role: 'user' }
];

// Middleware to check roles
const authorizeRole = (role) => (req, res, next) => {
  if (req.user.role !== role) return res.sendStatus(403);
  next();
};

// Middleware to protect routes and check token
const authenticateJWT = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.sendStatus(401);

  jwt.verify(token, secretKey, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

// Route to authenticate and issue token
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).send('Invalid credentials');

  const token = jwt.sign({ id: user.id, role: user.role }, secretKey, { expiresIn: '1h' });
  res.json({ token });
});

// Protected route accessible only by 'admin' role
app.get('/admin', authenticateJWT, authorizeRole('admin'), (req, res) => {
  res.send('Admin access granted');
});

// Protected route accessible only by 'user' role
app.get('/user', authenticateJWT, authorizeRole('user'), (req, res) => {
  res.send('User access granted');
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

**Usage:**

1. **Define Roles**: Add roles to users.
2. **Access Control**: Use `authorizeRole` middleware to restrict access based on roles.
3. **Verify JWT**: Include role information in JWT and validate it.

This setup demonstrates restricting route access based on user roles in an Express application.



